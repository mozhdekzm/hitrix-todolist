package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	"github.com/mozhdekzm/gqlgql/internal/domain"
	"github.com/mozhdekzm/gqlgql/internal/interface/graph/helpers"
	"github.com/mozhdekzm/gqlgql/internal/interface/graph/model"
	"time"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodoInput) (*model.Todo, error) {
	newTodo := domain.TodoItem{ID: uuid.New(), Description: input.Description, DueDate: input.DueDate, CreatedAt: time.Now(), UpdatedAt: time.Now()}
	createdTodo, err := r.TodoService.Create(ctx, newTodo)
	if err != nil {
		return nil, err
	}
	return helpers.MapDomainTodoToModel(createdTodo), nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, input model.UpdateTodoInput) (*model.Todo, error) {
	existingTodo, err := r.TodoService.FindByID(ctx, input.ID)
	if err != nil {
		return nil, fmt.Errorf("todo not found: %w", err)
	}

	existingTodo.Description = *input.Description
	existingTodo.DueDate = *input.DueDate
	existingTodo.UpdatedAt = time.Now()

	updatedTodo, err := r.TodoService.Update(ctx, existingTodo)
	if err != nil {
		return nil, err
	}

	return helpers.MapDomainTodoToModel(updatedTodo), nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id string) (bool, error) {
	err := r.TodoService.Delete(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	todos, err := r.TodoService.GetAll(ctx, 100, 0)
	if err != nil {
		return nil, err
	}

	modelTodos := make([]*model.Todo, len(todos))
	for i, t := range todos {
		modelTodos[i] = helpers.MapDomainTodoToModel(t)
	}

	return modelTodos, nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id string) (*model.Todo, error) {
	todo, err := r.TodoService.FindByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return helpers.MapDomainTodoToModel(todo), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
