// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mozhdekzm/gqlgql/internal/interface/repository (interfaces: OutboxRepository)

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/mozhdekzm/gqlgql/internal/domain"
)

// MockOutboxRepository is a mock of OutboxRepository interface.
type MockOutboxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOutboxRepositoryMockRecorder
}

// MockOutboxRepositoryMockRecorder is the mock recorder for MockOutboxRepository.
type MockOutboxRepositoryMockRecorder struct {
	mock *MockOutboxRepository
}

// NewMockOutboxRepository creates a new mock instance.
func NewMockOutboxRepository(ctrl *gomock.Controller) *MockOutboxRepository {
	mock := &MockOutboxRepository{ctrl: ctrl}
	mock.recorder = &MockOutboxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutboxRepository) EXPECT() *MockOutboxRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockOutboxRepository) Save(arg0 context.Context, arg1 *domain.OutboxEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockOutboxRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockOutboxRepository)(nil).Save), arg0, arg1)
}

// GetUnpublished mocks base method.
func (m *MockOutboxRepository) GetUnpublished(arg0 context.Context, arg1 int) ([]*domain.OutboxEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnpublished", arg0, arg1)
	ret0, _ := ret[0].([]*domain.OutboxEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnpublished indicates an expected call of GetUnpublished.
func (mr *MockOutboxRepositoryMockRecorder) GetUnpublished(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnpublished", reflect.TypeOf((*MockOutboxRepository)(nil).GetUnpublished), arg0, arg1)
}

// MarkAsPublished mocks base method.
func (m *MockOutboxRepository) MarkAsPublished(arg0 context.Context, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsPublished", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsPublished indicates an expected call of MarkAsPublished.
func (mr *MockOutboxRepositoryMockRecorder) MarkAsPublished(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsPublished", reflect.TypeOf((*MockOutboxRepository)(nil).MarkAsPublished), arg0, arg1)
}

// DeletePublished mocks base method.
func (m *MockOutboxRepository) DeletePublished(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublished", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePublished indicates an expected call of DeletePublished.
func (mr *MockOutboxRepositoryMockRecorder) DeletePublished(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublished", reflect.TypeOf((*MockOutboxRepository)(nil).DeletePublished), arg0, arg1)
}
